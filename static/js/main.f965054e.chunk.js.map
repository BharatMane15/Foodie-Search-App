{"version":3,"sources":["Componant/Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","currItem","useState","viewIngredients","setViewIngredients","viewCalories","setViewCalories","className","style","width","textAlign","src","recipe","image","alt","label","href","url","position","right","onClick","color","fontFamily","fontSize","ingredientLines","display","marginLeft","totalDaily","PROCNT","quantity","CHOCDF","CA","FAT","App","query","setQuery","recipes","setRecipes","getdata","a","axios","get","result","data","more","alert","hits","onSubmit","e","preventDefault","type","name","onChange","target","value","autoComplete","placeholder","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f965054e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './Recipe.css';\n// import Calories from './Calories';\nconst Recipe = ({currItem}) => {\n    const [viewIngredients,setViewIngredients]=useState(false)\n    const [viewCalories,setViewCalories]=useState(false)\n    \n    const onIngredients = () =>{\n       setViewIngredients(true)\n    if(viewIngredients){\n      setViewIngredients(false)\n    }\n     else if(viewCalories){\n         setViewIngredients(true)\n       setViewCalories(false)\n\n     }\n    }\n    const onCalories = () => {\n        setViewCalories(true)\n      \n        if(viewCalories){\n          setViewCalories(false)\n        }\n      else if(viewIngredients){\n         setViewIngredients(false)\n         setViewCalories(true)\n     }\n    }\n    \n    return (<>\n                <div className=\"card m-4 shadow-lg p-3 mb-5 bg-red rounded\" style={{width: \"18rem\",textAlign:\"center\"}}>\n                  <img className=\"card-img-top bg-image hover-overlay hover-zoom hover-shadow ripple\" src={currItem.recipe.image} alt=\"Image_Loading_Error\" />\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">{currItem.recipe.label}</h5>\n                    <a href={currItem.recipe.url}>More Details</a>\n                    <div className=\"twoButton\">\n                    <button className=\"btn btn-outline-success mt-4 \" style={{position: 'relative', right: '20%'}} onClick={onIngredients}>INGREDIENTS</button>\n                    <button className=\"btn btn-outline-success mt-4 \" style={{position: 'relative', right: '20%'}} onClick={onCalories}>CALORIES</button>\n                    </div>\n                    <div>\n                    {/* <Calories  whenclick={whenClick} currItem={currItem}/> */}\n                    </div>\n                     <div className=\"data\">\n                         { viewIngredients &&\n                             <p><span style={{color:\"red\",fontFamily:\"-moz-initial\",fontSize:\"large\"}}>Ingredients<br/></span>{currItem.recipe.ingredientLines}</p>\n                         }\n                     {/* {click ? <p><span style={{color:\"red\",fontFamily:\"-moz-initial\"}}>Ingredients<br/></span>{currItem.recipe.ingredientLines}</p> : \"\"} */}\n                    \n                     {\n                         viewCalories &&  <>\n \n <div style={{display:\"table-cell\",marginLeft:\"-5%\",textAlign:\"left\"}}>\n              \n                        <ul>\n                            <li><span style={{fontSize:\"large\",color:\"red\", marginLeft:\"-10%\"}}>{currItem.recipe.totalDaily.PROCNT.label}</span>:-<span style={{fontSize:\"90%\"}}>{currItem.recipe.totalDaily.PROCNT.quantity} %</span></li>\n                            <li><span style={{fontSize:\"large\",color:\"red\", marginLeft:\"-10%\"}}>{currItem.recipe.totalDaily.CHOCDF.label}</span>:-<span style={{fontSize:\"90%\"}}>{currItem.recipe.totalDaily.CHOCDF.quantity} %</span></li>\n                            <li><span style={{fontSize:\"large\",color:\"red\", marginLeft:\"-10%\"}}>{currItem.recipe.totalDaily.CA.label}</span>:-<span style={{fontSize:\"90%\"}}>{currItem.recipe.totalDaily.CA.quantity} %</span></li>\n                            <li><span style={{fontSize:\"large\",color:\"red\", marginLeft:\"-10%\"}}>{currItem.recipe.totalDaily.FAT.label}</span>:-<span style={{fontSize:\"90%\"}}>{currItem.recipe.totalDaily.FAT.quantity} %</span></li>\n                        </ul> \n                          </div>\n                          {/* <Calories currItem={currItem} /> */}\n                     </>}\n                    </div>\n                  </div>\n                </div>\n    </>)\n}\n\nexport default Recipe\n","\n\nimport axios from \"axios\";\nimport \"./App.css\";\nimport React, {useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Recipe from \"./Componant/Recipe\";\nimport Calories from \"./Componant/Calories\";\n\n\nconst App = () => {\n  const [query, setQuery] = useState(null);\n  const [recipes, setRecipes] = useState(null);\n  // const [alert,setAlert]=useState(\"\")\n\n\n  const APP_ID = \"4e9f05eb\";\n  const APP_KEY = \"9b904d703fa0d46a88ce1ac63f29f498\";\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const getdata = async () => {\n\n    if(query){\n      const result = await axios.get(url);\n\n      if (!result.data.more) {\n        return alert(\"No food with such name, Clear and search diffrent Food\");\n      }\n\n      setRecipes(result.data.hits);\n\n      setQuery(\"\");\n    }\n    else{\n      alert('please enter valid input')\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    getdata();\n  };\n  return (<>\n  <div className=\"App\">\n  <h1 className=\"title\">Foodie Search</h1>\n  <div>\n    <p className=\"mt-2\">Here You Can view Details About The Food</p>\n  </div>\n             \n      <form onSubmit={onSubmit} className=\"search-form\">\n      \n        <input \n          className=\"input\"\n          type=\"text\"\n          name=\"query\"\n          onChange={(e)=>setQuery(e.target.value)}\n          value={query}\n          autoComplete=\"off\"\n          placeholder=\"Search Food\"\n         />\n        <div className=\"but\">\n        <button className=\"btn btn-outline-info\" onClick={getdata} >Search</button>\n        </div>\n\n\n      </form>\n      <div className=\"recipes\">\n          {recipes && recipes.map(currItem => <>\n          <Recipe currItem={currItem} />\n          \n          </>)}\n      </div>\n    </div>\n  </>);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}